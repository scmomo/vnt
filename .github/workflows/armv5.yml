name: with cross for vn-link-cli armv5te
# 参考 https://github.com/lmq8267/vnt/blob/main/.github/workflows/%E5%A4%9A%E7%89%88%E6%9C%AC.yml

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.getversion.outputs.ver }}
      cver: ${{ steps.getversion.outputs.cver }}
    steps:
    - name: 检查更新
      id: getversion
      run: |
        ver=`curl https://api.github.com/repos/vnt-dev/vnt/releases/latest | jq -r '.tag_name'`
        cver=`curl https://api.github.com/repos/lmq8267/vnt/releases/latest | jq -r '.tag_name'`
        echo "ver=${ver}" >> $GITHUB_OUTPUT
        echo "cver=${cver}" >> $GITHUB_OUTPUT

  build:
    # for armv5te-unknown-linux-gnueabi # anyka ak3918 board
    runs-on: ubuntu-latest
    env:
      arm-anykav500-linux-uclibcgnueabi-gcc: /opt/armv5te/arm-anykav500-linux-uclibcgnueabi_V1.0.05/bin/arm-anykav500-linux-uclibcgnueabi-gcc
      
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
  
      - name: Install cross
        run: cargo install cross
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm
      - name: Set Ak37E CrossCompile
        run: |
          mkdir -p /opt/cross-armv5te
          wget https://github.com/wireless-tag-com/ak-linux-sdk/raw/refs/heads/main/AnyCloud37E_SDK_V1.08/tools/arm-anykav500-linux-uclibcgnueabi_V1.0.05.tar.bz2
          tar -jxvf arm-anykav500-linux-uclibcgnueabi_V1.0.05.tar.bz2 -C /opt/cross-armv5te
          export PATH=$PATH:/opt/armv5te/arm-anykav500-linux-uclibcgnueabi_V1.0.05/bin
          source ~/.bashrc
          # test arm-anykav500-linux-uclibcgnueabi-gcc
          arm-anykav500-linux-uclibcgnueabi-gcc -v
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Cross compile
        env:
          CROSS_CONTAINER_ENGINE: docker
        run: |
          #rustup target add mipsel-unknown-linux-musl
          cat >>~/.cargo/config <<EOF
          [target.armv5te-unknown-linux-gnueabi]
          linker = "arm-anykav500-linux-uclibcgnueabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",] 
          #编译静态选项 默认编译动态版
          EOF
          git clone https://github.com/vnt-dev/vnt -b ${{ needs.check.outputs.ver }} /opt/vnt
          cd /opt/vnt
          #修改为中文
          sed -i 's|en.to_string|zh.to_string|g' ./common/src/cli.rs
          sed -i 's|en-US|zh|g' ./common/src/cli.rs
          #vn-link-cli_lite
          cross build --package vn-link-cli --target armv5te-unknown-linux-gnueabi --release --features openssl-vendored,ring-cipher,wss
          cp -rf /opt/vnt/target/armv5te-unknown-linux-gnueabi/release/vn-link-cli /opt/armv5te/vn-link-cli_lite
          cargo clean
          #vn-link-cli_openssl
          cross build --package vn-link-cli --target armv5te-unknown-linux-gnueabi --release --features openssl-vendored,aes_ecb,server_encrypt,aes_gcm,ip_proxy,port_mapping
          cp -rf /opt/vnt/target/armv5te-unknown-linux-gnueabi/release/vn-link-cli /opt/armv5te/vn-link-cli_openssl
          cargo clean
          #vn-link-cli_default
          cross build --package vn-link-cli --target armv5te-unknown-linux-gnueabi --release --features default
          cp -rf /opt/vnt/target/armv5te-unknown-linux-gnueabi/release/vn-link-cli /opt/armv5te/vn-link-cli_default
          cargo clean
          #vn-link-cli_full
          cross build --package vn-link-cli --target armv5te-unknown-linux-gnueabi --release --features openssl-vendored,ring-cipher,wss
          cp -rf /opt/vnt/target/armv5te-unknown-linux-gnueabi/release/vn-link-cli /opt/armv5te/vn-link-cli_full
          cargo clean

      - name: 安装 UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          install-only: true
      - name: 压缩
        run: |
          cd /opt/armv5te
          du -ha
          upx --lzma --best /opt/armv5te/vn-link-cli_lite
          upx --lzma --best /opt/armv5te/vn-link-cli_openssl
          upx --lzma --best /opt/armv5te/vn-link-cli_default
          upx --lzma --best /opt/armv5te/vn-link-cli_full
          du -ha
          #echo $(md5sum /opt/mipsel/vnt-cli_${NAME} | awk '{print $1;}') >${NAME}_MD5.txt
          echo "build_time=$(date '+%Y年%m月%d日%H:%M:%S' | jq -sRr @uri)" >> $GITHUB_ENV
      - name : 上传
        uses: actions/upload-artifact@master
        if: always()
        with:
         name: vn-link-cli_armv5te
         path: /opt/armv5te/vn-link-cli_*
      - name: 发布
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ github.token }}
          body: |
           > ### ![](https://img.shields.io/badge/%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4-${{ env.build_time }}-8267?logo=github&labelColor=%E9%A1%BB)![](https://img.shields.io/github/downloads/${{ github.repository }}/${{ needs.check.outputs.ver }}/total?label=%E4%B8%8B%E8%BD%BD%E6%AC%A1%E6%95%B0&logo=github)![](https://img.shields.io/docker/image-size/lmq8267/vnt/${{ needs.check.outputs.ver }}?label=%E9%95%9C%E5%83%8F%E5%A4%A7%E5%B0%8F&link=https%3A%2F%2Fhub.docker.com%2Fr%2Flmq8267%2Fvnt&logo=docker) 

           ### **各版本区别：**
           
           - **lite**    ：不集成任何加密,去掉了所有模块
           - **default** ：默认配置，没有集成openssl和wss协议 
           - **full**    ：集成所有模块所有加密方式

           - **armv5te**  ：armv5te架构，包含所有模块
           
           如果不加密（参数-w），集不集成加密模块都不影响使用，若加密则所有客户端都应使用相同的加密方式
           [详细加密方式介绍](https://github.com/vnt-dev/vnt#%E7%BC%96%E8%AF%91)、[官方更新说明](https://github.com/vnt-dev/vnt/releases)

           [其他平台压缩版](https://github.com/lmq8267/vnt-cli/releases)
          tag_name: ${{ needs.check.outputs.ver }}
          files: |
              /opt/armv5te/*
      - name: 删除工作流
        uses: GitRML/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          retain_days: 2
          keep_minimum_runs: 1